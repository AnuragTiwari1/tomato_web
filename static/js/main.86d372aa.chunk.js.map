{"version":3,"sources":["state/reducers/restaurantReducer/index.js","state/reducers/appReducer/actions.js","state/reducers/appReducer/index.js","state/reducers/index.js","state/reducers/restaurantReducer/actions.js","state/store.js","services/httpCaller.js","services/restaurantServices.js","services/urls.js","pages/home/components/Herocomponent.js","pages/home/components/PopularCuisines.js","pages/home/components/NearbyRestaurant.js","pages/home/index.js","components/Loader.jsx","pages/about/index.js","pages/router.js","App.js","serviceWorker.js","index.js"],"names":["initialState","location","latitude","longitude","name","restaurantList","cuisines","setLoader","loaderObj","type","payload","isLoading","loadingMessage","rootReducer","combineReducers","restaurantsReducer","state","action","appReducer","middleware","thunk","composedEnhancers","compose","applyMiddleware","store","createStore","process","ZOMATO_API_KEY","REACT_APP_ZOMATO_API_KEY","BASE_URL","REACT_APP_BASE_URL","RestaurantServices","params","id","start","lat","lon","entity_type","entity_id","res_id","axiosInstance","axios","create","baseURL","headers","url","config","this","get","post","HeroComponent","props","dispatch","useDispatch","restaurantServices","React","useEffect","navigator","geolocation","getCurrentPosition","coords","getRestaurantByLatLong","then","data","title","nearby_restaurants","popularity","top_cuisines","map","r","restaurant","alert","console","log","style","background","backgroundSize","minHeight","color","display","alignItems","justifyContent","flexDirection","placeholder","PopularCuisines","padding","flexWrap","e","CuisineCard","className","NearbyRestaurants","restaurants","RestaurantCard","user_rating","average_cost_for_two","currency","history","useHistory","onClick","push","float","aggregate_rating","Home","connect","Loader","width","height","backgroundColor","position","zIndex","top","fontSize","fontWeight","msg","About","match","useState","resDetails","setResDetails","getRestaurantDetailsById","resId","JSON","stringify","AppRouter","loading","path","component","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wRAEMA,EAAe,CACnBC,SAAU,CACRC,SAAU,KACVC,UAAW,KACXC,KAAM,IAERC,eAAgB,GAChBC,SAAU,ICNCC,EAAY,SAACC,GACxB,MAAO,CACLC,KAJsB,aAKtBC,QAAS,CACPC,UAAWH,EAAUG,UACrBC,eAAgBJ,EAAUI,kBCN1BZ,EAAe,CACnBW,WAAW,EACXC,eAAgB,ICALC,EAAcC,YAAgB,CAAEC,mBHQX,WAAmC,IAAlCC,EAAiC,uDAAzBhB,EAAciB,EAAW,uCAClE,OAAQA,EAAOR,MACb,IIbwB,eJctB,OAAO,2BACFO,GACAC,EAAOP,SAGd,QACE,OAAOM,IGjBoDE,WDGvC,WAAmC,IAAlCF,EAAiC,uDAAzBhB,EAAciB,EAAW,uCAC1D,OAAQA,EAAOR,MACb,IDRsB,aCSpB,OAAO,2BACFO,GACAC,EAAOP,SAGd,QACE,OAAOM,MGVPG,EAAa,CAACC,KAUdC,EAAoBC,IAAO,WAAP,GAAQC,IAAe,WAAf,EAAmBJ,IAA3B,OAXR,KAeHK,EAFDC,YAAYZ,EAdL,GAcgCQ,G,iFCbjDK,sPAFwBC,E,EAA1BC,yBACoBC,E,EAApBC,mBCGWC,EAAb,gLAMoBC,GAAS,IACjBC,EAA4BD,EAA5BC,GADgB,EACYD,EAAxBE,aADY,MACJ,EADI,EACDC,EAAaH,EAAbG,IAAKC,EAAQJ,EAARI,IAC5B,OAAO,2DCfkB,UDeU,CACjCJ,OAAQ,CACNK,YAAa,OACbC,UAAWL,EACXC,QACAC,MACAC,WAdR,6CAwByBJ,GAAS,IACtBG,EAAaH,EAAbG,IAAKC,EAAQJ,EAARI,IACb,OAAO,2DChC2B,WDgCO,CACvCJ,OAAQ,CACNG,MACAC,WA7BR,+CAuC2BH,GACvB,OAAO,2DC7C6B,cD6CO,CACzCD,OAAQ,CACNO,OAAQN,SA1ChB,GDAA,iDACEO,cAAgBC,IAAMC,OAAO,CAC3BC,QAASd,EACTe,QAAS,CAAE,WAAYjB,KAH3B,gDAYMkB,EAAKC,GACP,OAAOC,KAAKP,cAAcQ,IAAIH,EAAKC,KAbvC,2BAsBOD,EAAKC,GACR,OAAOC,KAAKP,cAAcS,KAAKJ,EAAKC,OAvBxC,MGDaI,EAAgB,SAACC,GAC5B,IAAMC,EAAWC,cACXC,EAAqB,IAAIvB,EAsC/B,OApCAwB,IAAMC,WAAU,WACV,gBAAiBC,WACnBL,EACE7C,EAAU,CACRI,WAAW,EACXC,eAAgB,mCAGpB6C,UAAUC,YAAYC,oBACpB,gBAAGC,EAAH,EAAGA,OAAH,OACEN,EACGO,uBAAuB,CACtB1B,IAAKyB,EAAO1D,SACZkC,IAAKwB,EAAOzD,YAEb2D,MAAK,YAAe,ILtBL7D,EAAUI,EAAgBC,EKsBjCyD,EAAW,EAAXA,KACPX,GLvBcnD,EKyBV,CACEC,SAAU0D,EAAO1D,SACjBC,UAAWyD,EAAOzD,UAClBC,KAAM2D,EAAK9D,SAAS+D,OL5BF3D,EK8BpB0D,EAAKE,mBL9B+B3D,EK+BpCyD,EAAKG,WAAWC,aL9BzB,CACL1D,KAJwB,eAKxBC,QAAS,CACPT,WACAI,eAAgBA,EAAe+D,KAAI,SAACC,GAAD,OAAOA,EAAEC,cAC5ChE,eK4BQ8C,EAAS7C,EAAU,CAAEI,WAAW,WAEtC,kBAAM4D,MAAM,oCAGdC,QAAQC,IAAI,mBAEb,IAGD,yBACEC,MAAO,CACLC,WACE,0FACFC,eAAgB,QAChBC,UAAW,QACXC,MAAO,QACPC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,cAAe,WAGjB,sCACA,sDACA,2BAAOC,YAAY,0BC3DZC,G,MAAkB,SAACjC,GAC9B,OACE,6BACE,uBAAGuB,MAAO,CAAEW,QAAS,QAArB,iCACA,yBAAKX,MAAO,CAAEW,QAAS,MAAON,QAAS,OAAQO,SAAU,SACtDnC,EAAM7C,SAAS8D,KAAI,SAACmB,GAAD,OAClB,kBAAC,EAAD,CAAanF,KAAMmF,WAOvBC,EAAc,SAAC,GAAc,IAAZpF,EAAW,EAAXA,KACrB,OACE,yBAAKqF,UAAU,aACb,2BAAIrF,KCfGsF,EAAoB,SAACvC,GAChC,OACE,6BACE,uBAAGuB,MAAO,CAAEW,QAAS,QAArB,oCACA,yBAAKX,MAAO,CAAEW,QAAS,MAAON,QAAS,OAAQO,SAAU,SACtDnC,EAAMwC,YAAYvB,KAAI,SAACmB,GAAD,OACrB,kBAAC,EAAmBA,SAOxBK,EAAiB,SAAC,GAOjB,IANLxF,EAMI,EANJA,KACAyF,EAKI,EALJA,YACAvF,EAII,EAJJA,SACAwF,EAGI,EAHJA,qBACAC,EAEI,EAFJA,SACA9D,EACI,EADJA,GAEM+D,EAAUC,cAEhB,OACE,yBAAKR,UAAU,oBAAoBS,QAAS,kBAAIF,EAAQG,KAAR,iBAAuBlE,MACrE,2BAAI7B,GACJ,2BAAIE,GACJ,mDACwByF,EADxB,IACmCD,EAAsB,IACvD,0BAAMpB,MAAO,CAAE0B,MAAO,UAAtB,SAAmCP,EAAYQ,qBCjBhD,IAAMC,EAAOC,aAAQ,SAACvF,GAAD,MAAY,CACtCV,SAAUU,EAAMD,mBAAmBT,SACnCqF,YAAa3E,EAAMD,mBAAmBV,kBAFpBkG,EAVpB,SAAuBpD,GACrB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAiB7C,SAAU6C,EAAM7C,WACjC,kBAAC,EAAD,CAAmBqF,YAAaxC,EAAMwC,kBCT/Ba,EAAS,SAACrD,GACrB,OACE,yBACEuB,MAAO,CACL+B,MAAO,QACPC,OAAQ,QACR3B,QAAS,OACTC,WAAY,SACZE,cAAe,SACfD,eAAgB,SAChB0B,gBAAiB,kBACjBC,SAAU,WACVC,OAAQ,IACRC,IAAK,QAGP,uBAAGpC,MAAO,CAAEI,MAAO,QAASiC,SAAU,GAAIC,WAAY,SAAtD,cAGC7D,EAAM8D,KAAO,uBAAGvC,MAAO,CAAEI,MAAO,UAAY3B,EAAM8D,O,QChBlD,SAASC,EAAM/D,GAAQ,IAEjBnB,EACPmB,EADFgE,MAASnF,OAGLoB,EAAWC,cALU,EAMSE,IAAM6D,SAAS,IANxB,mBAMpBC,EANoB,KAMRC,EANQ,KAQrBhE,EAAqB,IAAIvB,EAiB/B,OAfAwB,IAAMC,WAAU,WACdJ,EACE7C,EAAU,CACRI,WAAW,EACXC,eAAgB,yCAGpB0C,EACGiE,yBAAyBvF,EAAOwF,OAChC1D,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPuD,EAAcvD,GACdX,EAAS7C,EAAU,CAAEI,WAAW,UAEnC,CAACqB,EAAOwF,QAGT,6BACE,qCACA,8BAAOC,KAAKC,UAAUL,EAAY,KAAM,KCZvC,IAAMM,EAAYpB,aAAQ,SAACvF,GAAD,MAAY,CAC3C4G,QAAS5G,EAAME,WAAWP,UAC1BC,eAAgBI,EAAME,WAAWN,kBAFV2F,EAdzB,SAA4BpD,GAC1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0E,KAAK,gBAAgBC,UAAWZ,IACvC,kBAAC,IAAD,CAAOW,KAAK,KACV,kBAACvB,EAAD,QAGHnD,EAAMyE,SAAW,kBAAC,EAAD,CAAQX,IAAK9D,EAAMvC,qBCH5BmH,MARf,WACE,OACE,kBAAC,IAAD,CAAUvG,MAAOA,GACf,kBAACmG,EAAD,QCIcK,QACW,cAA7BC,OAAOhI,SAASiI,UAEe,UAA7BD,OAAOhI,SAASiI,UAEhBD,OAAOhI,SAASiI,SAASf,MACvB,2DCZNgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB7E,WACrBA,UAAU8E,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.86d372aa.chunk.js","sourcesContent":["import { SET_LOCATION } from \"./actions\";\n\nconst initialState = {\n  location: {\n    latitude: null,\n    longitude: null,\n    name: \"\",\n  },\n  restaurantList: [],\n  cuisines: [],\n};\n\nexport const restaurantsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOCATION:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","//action types\nexport const SET_LOADER = \"SET_LOADER\";\n\nexport const setLoader = (loaderObj) => {\n  return {\n    type: SET_LOADER,\n    payload: {\n      isLoading: loaderObj.isLoading,\n      loadingMessage: loaderObj.loadingMessage,\n    },\n  };\n};\n","import { SET_LOADER } from \"./actions\";\n\nconst initialState = {\n  isLoading: false,\n  loadingMessage: \"\",\n};\n\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADER:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { restaurantsReducer } from \"./restaurantReducer\";\nimport { appReducer } from \"./appReducer\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({ restaurantsReducer, appReducer });\n","//action types\nexport const SET_LOCATION = \"SET_LOCATION\";\n\nexport const setLocation = (location, restaurantList, cuisines) => {\n  return {\n    type: SET_LOCATION,\n    payload: {\n      location,\n      restaurantList: restaurantList.map((r) => r.restaurant),\n      cuisines,\n    },\n  };\n};\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { rootReducer } from \"./reducers\";\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk];\n\nif (process.env.NODE_ENV === \"development\") {\n  const devToolsExtension = window.devToolsExtension;\n\n  if (typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\n\nconst store = createStore(rootReducer, initialState, composedEnhancers);\n\nexport default store;\n","import axios from \"axios\";\n\nconst {\n  REACT_APP_ZOMATO_API_KEY: ZOMATO_API_KEY,\n  REACT_APP_BASE_URL: BASE_URL,\n} = process.env;\n\nexport class HttpCaller {\n  axiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: { \"user-key\": ZOMATO_API_KEY },\n  });\n\n  /**\n   * get\n   * this is the wrapper around original axios get method\n   * @param {sting} url provide the url after the baseURL eg: '/someResource' for 'cooldomain.com/someResource'\n   * @param {Object=} config this is the config object to override the axios default config\n   */\n  get(url, config) {\n    return this.axiosInstance.get(url, config);\n  }\n\n  /**\n   * post\n   * this is the wrapper around original axios post method\n   * @param {sting} url provide the url after the baseURL eg: '/someResource' for 'cooldomain.com/someResource'\n   * @param {Object=} config this is the config object to override the axios default config\n   */\n  post(url, config) {\n    return this.axiosInstance.post(url, config);\n  }\n}\n","import { HttpCaller } from \"./httpCaller\";\nimport {\n  searchRestaurant,\n  getRestaurantByLatLong,\n  getRestaurantDetailsById,\n} from \"./urls\";\n\nexport class RestaurantServices extends HttpCaller {\n  /**\n   * searchRestaurants\n   * this method can be used to search the restaurants db of zomato.\n   * @param {Object} searchParams\n   */\n  searchRestaurants(params) {\n    const { id, start = 0, lat, lon } = params;\n    return super.get(searchRestaurant, {\n      params: {\n        entity_type: \"city\",\n        entity_id: id,\n        start,\n        lat,\n        lon,\n      },\n    });\n  }\n\n  /**\n   * getRestaurantByLatLong\n   * this method provides the restaurant by lat long\n   * @param {Object} locationObject the location for which you want the restaurant list\n   */\n  getRestaurantByLatLong(params) {\n    const { lat, lon } = params;\n    return super.get(getRestaurantByLatLong, {\n      params: {\n        lat,\n        lon,\n      },\n    });\n  }\n\n  /**\n   * getRestaurantDetailsById\n   * this method fetches the restaurant detail by id\n   * @param {number} id the id of the restaurant to be fetched\n   */\n  getRestaurantDetailsById(id) {\n    return super.get(getRestaurantDetailsById, {\n      params: {\n        res_id: id,\n      },\n    });\n  }\n}\n","export const searchRestaurant = `/search`;\nexport const getRestaurantByLatLong = \"/geocode\";\nexport const getRestaurantDetailsById = \"/restaurant\";\n","import React from \"react\";\nimport { setLoader } from \"../../../state/reducers/appReducer/actions\";\nimport { setLocation } from \"../../../state/reducers/restaurantReducer/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { RestaurantServices } from \"../../../services/restaurantServices\";\n\nexport const HeroComponent = (props) => {\n  const dispatch = useDispatch();\n  const restaurantServices = new RestaurantServices();\n\n  React.useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      dispatch(\n        setLoader({\n          isLoading: true,\n          loadingMessage: \"Fetching Restaurants near you\",\n        })\n      );\n      navigator.geolocation.getCurrentPosition(\n        ({ coords }) =>\n          restaurantServices\n            .getRestaurantByLatLong({\n              lat: coords.latitude,\n              lon: coords.longitude,\n            })\n            .then(({ data }) => {\n              dispatch(\n                setLocation(\n                  {\n                    latitude: coords.latitude,\n                    longitude: coords.longitude,\n                    name: data.location.title,\n                  },\n                  data.nearby_restaurants,\n                  data.popularity.top_cuisines\n                )\n              );\n              dispatch(setLoader({ isLoading: false }));\n            }),\n        () => alert(\"Please allow location access\")\n      );\n    } else {\n      console.log(\"Not Available\");\n    }\n  }, []);\n\n  return (\n    <div\n      style={{\n        background:\n          \"url(https://b.zmtcdn.com/images/developers/apihome_bg.jpg?output-format=webp)center top\",\n        backgroundSize: \"cover\",\n        minHeight: \"250px\",\n        color: \"white\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <h1>Tomato</h1>\n      <p>A cheap clone of zomato</p>\n      <input placeholder=\"enter location here\" />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./styles.css\";\n\nexport const PopularCuisines = (props) => {\n  return (\n    <div>\n      <p style={{ padding: \"5px\" }}>Popular Cuisines in your area</p>\n      <div style={{ padding: \"5px\", display: \"flex\", flexWrap: \"wrap\" }}>\n        {props.cuisines.map((e) => (\n          <CuisineCard name={e} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst CuisineCard = ({ name }) => {\n  return (\n    <div className=\"fancyCard\">\n      <p>{name}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./styles.css\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const NearbyRestaurants = (props) => {\n  return (\n    <div>\n      <p style={{ padding: \"5px\" }}>Popular Restaurants in your area</p>\n      <div style={{ padding: \"5px\", display: \"flex\", flexWrap: \"wrap\" }}>\n        {props.restaurants.map((e) => (\n          <RestaurantCard {...e} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst RestaurantCard = ({\n  name,\n  user_rating,\n  cuisines,\n  average_cost_for_two,\n  currency,\n  id,\n}) => {\n  const history = useHistory();\n\n  return (\n    <div className=\"fancyCard pointer\" onClick={()=>history.push(`/about/${id}`)}>\n      <p>{name}</p>\n      <p>{cuisines}</p>\n      <p>\n        average cost for 2 : {currency} {average_cost_for_two}{\" \"}\n        <span style={{ float: \"right\" }}>⭐{user_rating.aggregate_rating}</span>\n      </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { HeroComponent } from \"./components/Herocomponent\";\nimport { PopularCuisines } from \"./components/PopularCuisines\";\nimport { connect } from \"react-redux\";\nimport { NearbyRestaurants } from \"./components/NearbyRestaurant\";\n\nfunction HomeComponent(props) {\n  return (\n    <div>\n      <HeroComponent />\n      <PopularCuisines cuisines={props.cuisines} />\n      <NearbyRestaurants restaurants={props.restaurants} />\n    </div>\n  );\n}\n\nexport const Home = connect((state) => ({\n  cuisines: state.restaurantsReducer.cuisines,\n  restaurants: state.restaurantsReducer.restaurantList,\n}))(HomeComponent);\n","import React from \"react\";\n\nexport const Loader = (props) => {\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        position: \"absolute\",\n        zIndex: 100,\n        top: \"0px\",\n      }}\n    >\n      <p style={{ color: \"white\", fontSize: 25, fontWeight: \"bold\" }}>\n        Loading...\n      </p>\n      {props.msg && <p style={{ color: \"white\" }}>{props.msg}</p>}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { RestaurantServices } from \"../../services/restaurantServices\";\nimport { setLoader } from \"../../state/reducers/appReducer/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport function About(props) {\n  const {\n    match: { params },\n  } = props;\n\n  const dispatch = useDispatch();\n  const [resDetails, setResDetails] = React.useState({});\n\n  const restaurantServices = new RestaurantServices();\n\n  React.useEffect(() => {\n    dispatch(\n      setLoader({\n        isLoading: true,\n        loadingMessage: \"Fetching Restaurant details for you\",\n      })\n    );\n    restaurantServices\n      .getRestaurantDetailsById(params.resId)\n      .then(({ data }) => {\n        setResDetails(data);\n        dispatch(setLoader({ isLoading: false }));\n      });\n  }, [params.resId]);\n\n  return (\n    <div>\n      <h2>About</h2>\n      <code>{JSON.stringify(resDetails, null, 2)}</code>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./home\";\nimport { connect } from \"react-redux\";\nimport { Loader } from \"../components/Loader\";\nimport { About } from \"./about\";\n\nfunction AppRouterComponent(props) {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/about/:resId\" component={About} />\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n      {props.loading && <Loader msg={props.loadingMessage} />}\n    </Router>\n  );\n}\n\nexport const AppRouter = connect((state) => ({\n  loading: state.appReducer.isLoading,\n  loadingMessage: state.appReducer.loadingMessage,\n}))(AppRouterComponent);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./state/store\";\nimport { AppRouter } from \"./pages/router\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}